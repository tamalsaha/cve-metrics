package metricsstore

import (
	"io"
	"k8s.io/kube-state-metrics/v2/pkg/metric"
	"sync"
)

// MetricsStore implements the k8s.io/client-go/tools/cache.Store
// interface. Instead of storing entire Kubernetes objects, it stores metrics
// generated based on those objects.
type MetricsStore struct {
	// Protects metrics
	mutex sync.RWMutex
	// metrics is a map indexed by Kubernetes object id, containing a slice of
	// metric families, containing a slice of metrics. We need to keep metrics
	// grouped by metric families in order to zip families with their help text in
	// MetricsStore.WriteAll().
	Families []metric.Family
	// headers contains the header (TYPE and HELP) of each metric family. It is
	// later on zipped with with their corresponding metric families in
	// MetricStore.WriteAll().
	Headers []string
}

// NewMetricsStore returns a new MetricsStore
func NewMetricsStore(headers []string) *MetricsStore {
	return &MetricsStore{
		// generateMetricsFunc: generateFunc,
		Headers:  headers,
		Families: make([]metric.Family, len(headers)),
	}
}

// WriteAll writes all metrics of the store into the given writer, zipped with the
// help text of each metric family.
func (s *MetricsStore) WriteAll(w io.Writer) error {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	for i, help := range s.Headers {
		_, err := w.Write([]byte(help))
		if err != nil {
			return err
		}
		_, err = w.Write([]byte{'\n'})
		if err != nil {
			return err
		}
		_, err = w.Write(s.Families[i].ByteSlice())
		if err != nil {
			return err
		}
	}
	return nil
}
